// The MIT License (MIT)
//
// Copyright (c) 2019,2020 The Raygun Authors.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#include "raytracer_bindings.h"

struct Sphere {
    vec3 center;
    float radius;
};

struct Aabb {
    vec3 minimum;
    vec3 maximum;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

hitAttributeEXT vec3 attribs;
layout(binding = RAYGUN_RAYTRACER_BINDING_ACCELERATION_STRUCTURE, set = 0) uniform accelerationStructureEXT topLevelAS;

layout(binding = RAYGUN_RAYTRACER_BINDING_UNIFORM_BUFFER, set = 0) uniform UniformBufferObject{
#include "uniform_buffer_object.def"
} ubo;

struct Material {
#include "gpu_material.def"
};

layout(binding = RAYGUN_RAYTRACER_BINDING_MATERIAL_BUFFER, set = 0) buffer Materials
{
    Material m[];
}
materials;

struct InstanceOffsetTableEntry {
#include "instance_offset_table.def"
};

layout(binding = RAYGUN_RAYTRACER_BINDING_INSTANCE_OFFSET_TABLE, set = 0) buffer InstanceOffsetTable
{
    InstanceOffsetTableEntry e[];
}
instanceOffsetTable;

layout(binding = RAYGUN_RAYTRACER_BINDING_SPHERE_BUFFER, set = 0, scalar) buffer allSpheres_
{
    Sphere i[];
}
allSpheres;

// Ray-Sphere intersection
// http://viclw17.github.io/2018/07/16/raytracing-ray-sphere-intersection/
float hitSphere(const Sphere s, const Ray r)
{
    vec3 oc = r.origin - s.center;
    float a = dot(r.direction, r.direction);
    float b = 2.0 * dot(oc, r.direction);
    float c = dot(oc, oc) - s.radius * s.radius;
    float discriminant = b * b - 4 * a * c;
    if(discriminant < 0) {
        return -1.0;
    }
    else {
        return (-b - sqrt(discriminant)) / (2.0 * a);
    }
}

// Ray-AABB intersection
float hitAabb(const Aabb aabb, const Ray r)
{
    vec3 invDir = 1.0 / r.direction;
    vec3 tbot = invDir * (aabb.minimum - r.origin);
    vec3 ttop = invDir * (aabb.maximum - r.origin);
    vec3 tmin = min(ttop, tbot);
    vec3 tmax = max(ttop, tbot);
    float t0 = max(tmin.x, max(tmin.y, tmin.z));
    float t1 = min(tmax.x, min(tmax.y, tmax.z));
    return t1 > max(t0, 0.0) ? t0 : -1.0;
}

void main()
{
    Ray ray;
    ray.origin = gl_WorldRayOriginEXT;
    ray.direction = gl_WorldRayDirectionEXT;
    // Sphere data
    Sphere sphere = allSpheres.i[gl_PrimitiveID];
    float tHit = -1;
    // int hitKind = gl_PrimitiveID % 2 == 0 ? KIND_SPHERE : KIND_CUBE;
    int hitKind = KIND_SPHERE;
    if(hitKind == KIND_SPHERE) {
        // Sphere intersection
        tHit = hitSphere(sphere, ray);
    }
    else {
        // AABB intersection
        Aabb aabb;
        aabb.minimum = sphere.center - vec3(sphere.radius);
        aabb.maximum = sphere.center + vec3(sphere.radius);
        tHit = hitAabb(aabb, ray);
    }
    // Report hit point
    if(tHit > 0) reportIntersectionEXT(tHit, hitKind);
}
